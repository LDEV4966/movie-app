{"version":3,"sources":["Movie.js","App.js","index.js"],"names":["Movie","id","year","title","summary","poster","genres","className","src","alt","map","genre","itemIndex","slice","App","state","isLoading","movies","getMovie","a","axios","get","data","console","log","setState","this","movie","medium_cover_image","React","Component","ReactDOM","render","document","getElementById"],"mappings":"yRAqCeA,MAjCf,YAA6D,EAA3CC,GAA4C,IAAxCC,EAAuC,EAAvCA,KAAMC,EAAiC,EAAjCA,MAAOC,EAA0B,EAA1BA,QAASC,EAAiB,EAAjBA,OAAQC,EAAS,EAATA,OAChD,OACI,sBAAKC,UAAU,QAAf,UACI,qBAAKA,UAAY,gBAAjB,SACI,qBAAKC,IAAOH,EAAQI,IAAON,EAAOA,MAAOA,MAE7C,sBAAKI,UAAY,cAAjB,UACI,qBAAIA,UAAY,eAAhB,cAAiCJ,EAAjC,OACA,qBAAII,UAAY,cAAhB,cAAgCL,EAAhC,OACA,oBAAIK,UAAY,gBAAhB,SAEID,EAAOI,KAAI,SAACC,EAAMC,GACd,OACA,oBAAsBL,UAAY,eAAlC,SAAkDI,GAAvCC,QAKnB,oBAAGL,UAAY,iBAAf,cAAkCH,EAAQS,MAAM,EAAE,KAAlD,iBCmCDC,G,kNAnDbC,MAAQ,CACNC,WAAY,EACZC,OAAS,I,EAEXC,S,sBAAW,8BAAAC,EAAA,sEAKCC,IAAMC,IAAI,4DALX,gBAGIJ,EAHJ,EAEPK,KACEA,KAASL,OAGbM,QAAQC,IAAI,CAACP,WACb,EAAKQ,SAAS,CAACR,OAAOA,EAASD,WAAY,IAPlC,2C,kEAWTO,QAAQC,IAAI,WACZE,KAAKR,a,+BAEE,IAAD,EACyBQ,KAAKX,MAA5BC,EADF,EACEA,UAAYC,EADd,EACcA,OACpB,OACA,yBAASV,UAAY,YAArB,SACGS,EACC,qBAAKT,UAAY,SAAjB,SACE,sBAAMA,UAAY,eAAlB,0BAGA,qBAAKA,UAAY,SAAjB,SAEEU,EAAOP,KAAI,SAAAiB,GAET,GAAqB,KAAlBA,EAAMvB,QAIX,OAAO,cAAC,EAAD,CAEPH,GAAI0B,EAAM1B,GACVC,KAAMyB,EAAMzB,KACZC,MAAOwB,EAAMxB,MACbC,QAASuB,EAAMvB,QACfC,OAAQsB,EAAMC,mBACdtB,OAAUqB,EAAMrB,QANTqB,EAAM1B,e,GArCP4B,IAAMC,YCFxBC,IAASC,OAAO,cAAC,EAAD,IAAQC,SAASC,eAAe,W","file":"static/js/main.da6522a7.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./Movie.css\";\r\n\r\nfunction Movie ({ id, year, title, summary, poster, genres }){\r\n    return (\r\n        <div className=\"movie\">\r\n            <div className = \"movie__poster\">\r\n                <img src = {poster} alt = {title} title={title}/>\r\n            </div>\r\n            <div className = \"movie__data\">\r\n                <h3 className = \"movie__title\"> {title} </h3>\r\n                <h4 className = \"movie__year\"> {year} </h4>\r\n                <ul className = \"movie__genres\">\r\n                {\r\n                    genres.map((genre,itemIndex )=> {\r\n                        return(\r\n                        <li key = {itemIndex} className = \"movie__genre\">{genre}</li>\r\n                        );\r\n                    })\r\n                }\r\n                </ul>\r\n                <p className = \"movie__summary\"> {summary.slice(0,180)}... </p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nMovie.propTypes = {\r\n    id : PropTypes.number.isRequired,\r\n    year : PropTypes.number.isRequired,\r\n    title : PropTypes.string.isRequired,\r\n    summary : PropTypes.string.isRequired,\r\n    poster : PropTypes.string.isRequired,\r\n    genres : PropTypes.arrayOf(PropTypes.string).isRequired\r\n};\r\n\r\nexport default Movie;","import React from \"react\";\nimport axios from \"axios\";\nimport Movie from \"./Movie\";\nimport \"./App.css\";\n\nclass App extends React.Component{\n  state = {\n    isLoading : true ,\n    movies : []\n  };\n  getMovie = async () =>{\n    const {\n      data:{\n        data : { movies }\n      }\n    } = await axios.get(\"https://yts-proxy.now.sh/list_movies.json?sort_by=rating\");\n    console.log({movies});\n    this.setState({movies:movies , isLoading : false});\n    \n  }\n  componentDidMount(){\n    console.log(\"Mounted\");\n    this.getMovie();\n  }\n  render(){\n    const { isLoading , movies } = this.state;\n    return (\n    <section className = \"container\">\n      {isLoading ? (\n        <div className = \"loader\">\n          <span className = \"loader__text\">Loading...</span>\n        </div> \n        ) : ( \n          <div className = \"movies\">\n          {\n            movies.map(movie => {\n\n              if(movie.summary === \"\"){\n                // eslint-disable-next-line\n                return;\n              }\n            return <Movie \n            key = {movie.id} \n            id={movie.id} \n            year={movie.year} \n            title={movie.title} \n            summary={movie.summary} \n            poster={movie.medium_cover_image}\n            genres = {movie.genres}\n            />})\n          }\n          </div>\n      )}\n    </section>\n    );\n  }\n}\nexport default App;\n\n// React는 가상 dom 을 이용해 dom 내부의 변화를 최소화 시켜 성능을 향상 시켜줌\n//component = js and html\n// component를 사용해 Js를 통해 html을 동작 가능하게 하고 , 또 component를 통해 반복이 필요한 html code를 줄여줌\n// React를 사용하기 위해서는 항상 코드 최상단에  \"import React from \"react\";\"를 삽입해야함\n// 외부 코드로 보낼때는 'export default {component.name}'을 삽입해야한다;\n// 외부 코드를 받을때는 'import {component.name} from '{component.name}의 위치';'\n// component는 jsx의 하나 밖에 없는 커스터마이즈로,<Abcd property = value /> 형식을 띈다.\n// 위와 같이 component의 이름의 시작은 대문자로 주고 props : property = value ;를 object 형식으로 자식 component에게 전달가능하다\n// 자식component는 해당 props를 'props'로 직접 받거나, 해당 property의 이름 { property } 와 같이 직접 호출도 가능하다. \n// <html></html>코드 내에서 Js사용시 {} 필요. ex) {FoodIlike.map( dish => < Test name = {dish.name} />)}\n// map은 각 array 의 item들을 object로 반환한다. \n// map Recap : React의 모든 각각의 element들은 서로 다를 필요가 있다. 그래서 각 각의 object 내에 key값을 줘 React내부에서 요소들의 차이를 두게한다.\n//그렇지 않으면, Warning: Each child in a list should have a unique \"key\" prop. 이러한 고유성을 상실했다는 오류가 발생한다.\n// 그래서 만약 component의 props로 자료형이 같은 배열을 가지게 되면 error가 발생.그래서 각 각의 object 내에 key값을 줘 React내부에서 요소들의 차이를 두게한다.\n// npm i proptypes 후 import Proptypes from \"prop-types\";\n// propTypes를 통해 props의 promising을 걸어 filtering 가능.\n//예시) Test.propTypes = { rating  : PropTypes.number.isRequired };\n//React는 자동적으로 모든 class component의 render() method를 실행한다.\n//그래서 class component는 render method 내에 기능을 추가해야한다\n//class component를 function component 대신 사용하는 이유는 state 때문이다\n//class {className} extends React.Component를 해줘야React.Component의 메서드를 사용할 수 있음.\n//state는 객체형태로 존재하며, class component의 데이터를 동적으로 바꾸기 위해 사용함\n//setState()를 호출할 때마다 react는 새로운 state와 함께 render() function을 호출한다.\n// 즉 다시말해, setState()를 사용해 state값을 호출하지 않으면 state값은 바뀌지 않는다.\n//Using: this.setState((current) => ({ count: current.count + 1 })); you can always be sure you will get the 'current' state\n//axios.get은 느리기 때문에 비동기적(async)으로 처리 해 줘야함\n// await를 통해 axios.get 으로 다 받아오면 그 후를 처리하는 비동기적 방식으로 실행","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nReactDOM.render(<App />,document.getElementById('root')); // 해당 React component를 html DOM으로 전달 하는법 ReactDOM.render({Component.name},DOM);\n\n//React실행전, (npm,node.js),npx,git 이 설치 되어있어야함\n//npx는 npm의 실행을 직접적이고 쉽게 해주는 실행파일?\n//작업 dir 내에서 ' npx create-react-app {dir.name} ' 으로 React 앱 환경구축 실행\n//작업 dir 내 터미널에서 ' npm start ' 로 localHost or wifi-network주소값을 얻어 앱 실행을 가능하게한다.\n"],"sourceRoot":""}